    [  Identifiers  ]

name     Azide_ion
ID       10
inprot   False


    [  Resname + Atnames  ]

AZI    N1  N2  N3  N3  N3  N3


    [  Emap data  ]

defdata omega
# units: cm-1
2175.76

defdata linear
# units: cm-1 ang2 e-1 (for Efield)
#      P             Ex           Ey            Ez            Gxx           Gyy         Gzz             Gxy           Gxz           Gyz
   0.00000000    0.00000000    0.00000000  194.52625621    4.01695738    4.01695738 -108.96542568    8.03391476    0.00000000    0.00000000  # N1
   0.00000000    0.00000000    0.00000000    0.00000000    1.79591362    1.79591362  -33.92874608    3.59182724    0.00000000    0.00000000  # N2
   0.00000000    0.00000000    0.00000000 -194.52625621    4.01695738    4.01695738 -108.96542568    8.03391476    0.00000000    0.00000000  # N3

defdata quadratic
# units: cm-1 ang4 e-2
#    ExEx         EyEy          EzEz
 -35.79532512  -35.79532512 -184.43402817   # N1N1
 -78.98783955  -78.98783955 1050.9959608    # N2N2
 -35.79532512  -35.79532512 -184.43402817   # N3N3


    [  Dmap data  ]

defdata magnitude
# the magnitude of the dipole vector (not yet known...)
0.470


    [  Python Code  ]

# Functions required by AIM

def set_references(self, FILES, RunPar):
    return []

def set_use_G(FILES, RunPar):
    # return whether the map requires gradient info.
    return True


def set_relevant_j(FILES, RunPar):
    # return for which atoms the fields should be calculated
    return [0, 1, 2]


def local_finder(atomlist):
    local_ix = AIM_SO.threesort_KvA(atomlist[0:3])
    return local_ix


def pre_calc(FILES, RunPar, WS, Map):
    pass


def pre_frame(FILES, RunPar, WS, Map):
    pass


def post_frame(FILES, RunPar, WS, Map):
    pass


def post_calc(FILES, RunPar, WS, Map):
    pass


def calc_freq(P, E, G, OscGroup, FILES, RunPar, WS, Map):

    # now, the fields have to be oriented in the correct direction.

    # first, find the rotation matrix (rot_mat) used to go to there
    N1 = WS.AllOscGroups[OscGroup, 6]
    N2 = WS.AllOscGroups[OscGroup, 7]
    N3 = WS.AllOscGroups[OscGroup, 8]

    Zvec = AIM_MF.PBC_diff(WS.positions[N3, :], WS.positions[N1, :],
                           WS.halfbox, WS.boxdims)
    Zvec /= AIM_MF.vec3_len(Zvec)

    # the directions of X and Y don't matter (they just have to be orthogonal),
    # so we just take some (definitely not along Zvec) arbitrary direction
    tempvec = np.array([Zvec[1], Zvec[2], Zvec[0]])
    tempvec2 = np.multiply(tempvec, np.array([1, 2, 3]))
    
    Xvec = AIM_MF.project(
        Zvec,
        tempvec2
    )
    Xvec /= AIM_MF.vec3_len(Xvec)
    Yvec = AIM_MF.crossprod(Zvec, Xvec)
    Yvec /= AIM_MF.vec3_len(Yvec)

    rot_mat = np.empty((3, 3), dtype='float32')
    rot_mat[0, :] = Xvec
    rot_mat[1, :] = Yvec
    rot_mat[2, :] = Zvec

    # then, apply that matrix to the fields

    relevant_j = Map.relevant_j_arr 

    E, G = AIM_MF.EG_rotation(E, G, rot_mat, relevant_j)

    omega = Map.Emap["omega"][0, 0]
    Pmap = Map.Emap["linear"][:, 0]
    Emap = Map.Emap["linear"][:, 1:4]
    Gmap = Map.Emap["linear"][:, 4:]

    freq = AIM_MF.apply_map(
        P[:3], E[:3, :], G[:3, :], omega, Pmap, Emap, Gmap, relevant_j)

    freq += AIM_MF.apply_map_2D(
        np.multiply(E[:3, :], E[:3, :]),
        Map.Emap["quadratic"][:, :],
        relevant_j)

    return freq, rot_mat

def calc_dipole(P, E, G, OscGroup, rot_mat, FILES, RunPar, WS, Map):
    N1 = WS.AllOscGroups[OscGroup, 6]
    N2 = WS.AllOscGroups[OscGroup, 7]
    N3 = WS.AllOscGroups[OscGroup, 8]
    
    mi = AIM_MF.PBC_diff(WS.positions[N3, :], WS.positions[N1, :],
                         WS.halfbox, WS.boxdims)
    mi /= AIM_MF.vec3_len(mi)
    mi *= 0.470
    
    ri = WS.positions[N2, :]

    return mi, ri


