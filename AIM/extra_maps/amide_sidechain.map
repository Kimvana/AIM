    [  Identifiers  ]

name     AmideSC
ID       1
inprot   True


    [  Resname + Atnames  ]

ASN    CG  OD1  CB  ND2  HD21  HD22
GLN    CD  OE1  CG  NE2  HE21  HE22


    [  Python Code  ]

def set_references(self, FILES, RunPar):
    reflist = []

    # loop over all references in this file
    for reference in self.rawreferences:
        reflist.append([reference, reference.AIMnotes])

    Emap = getattr(FILES.AllMaps, "E_" + RunPar.map_choice)
    for reference in Emap.references:
        if "EmapSC" in reference.AIMnotes:
            found = False
            for entry in reflist:
                if entry[0] == reference:
                    found = True
                    entry[1].append("frequency")
            if not found:
                reflist.append([reference, ["frequency"]])
    
    if RunPar.Dipole_choice == "Torii":
        for reference in FILES.OtherRefs:
            if "DmapTorii" in reference.AIMnotes:
                found = False
                for entry in reflist:
                    if entry[0] == reference:
                        found = True
                        entry[1].append("dipole")
                if not found:
                    reflist.append([reference, ["dipole"]])
    else:
        Dmap = getattr(FILES.AllMaps, "D_" + RunPar.Dipole_choice)
        for reference in Dmap.references:
            if "DmapSC" in reference.AIMnotes:
                found = False
                for entry in reflist:
                    if entry[0] == reference:
                        found = True
                        entry[1].append("dipole")
                if not found:
                    reflist.append([reference, ["dipole"]])
    

    return reflist
        

def set_use_G(FILES, RunPar):
    
    parmap = getattr(FILES.AllMaps, "E_" + RunPar.map_choice)

    return parmap.SC.useG


def set_relevant_j(FILES, RunPar):
    
    parmap = getattr(FILES.AllMaps, "E_" + RunPar.map_choice)
    
    return parmap.SC.relevant_j



def local_finder(atomlist):
    # the atoms of this group that shouldn't be taken into account when
    # calculating the electric field. CB (ASN) / CG (GLN) is most similar to
    # the CA in BB amides, and should not be ignored (hence why it is not
    # in the local_ix list)

    local_ix = AIM_SO.union_KvA(
        AIM_SO.threesort_KvA(atomlist[3:6]), atomlist[0:2]
    )
    return local_ix


def pre_calc(FILES, RunPar, WS, Map):
    pass


def pre_frame(FILES, RunPar, WS, Map):
    pass


def calc_freq(P, E, G, AmGroup, FILES, RunPar, WS, Map):
    # AIM calculates fields in units of e and angstrom, but these maps are
    # in bohr...
    P *= RunPar.bohr2ang
    E *= RunPar.bohr2ang2
    G *= RunPar.bohr2ang3

    # now, the fields have to be oriented in the correct direction.

    # first, find the rotation matrix (rot_mat) used to go to there
    Am_C = WS.AllOscGroups[AmGroup, 6]
    Am_O = WS.AllOscGroups[AmGroup, 7]
    Am_N = WS.AllOscGroups[AmGroup, 9]

    Xvec = AIM_MF.PBC_diff(WS.positions[Am_O, :], WS.positions[Am_C, :],
                           WS.halfbox, WS.boxdims)
    Xvec /= AIM_MF.vec3_len(Xvec)
    Yvec = AIM_MF.project(
        Xvec,
        AIM_MF.PBC_diff(
            WS.positions[Am_N, :], WS.positions[Am_C, :],
            WS.halfbox, WS.boxdims
        )
    )
    Yvec /= AIM_MF.vec3_len(Yvec)
    Zvec = AIM_MF.crossprod(Xvec, Yvec)
    Zvec /= AIM_MF.vec3_len(Zvec)

    rot_mat = np.empty((3, 3), dtype='float32')
    rot_mat[0, :] = Xvec
    rot_mat[1, :] = Yvec
    rot_mat[2, :] = Zvec

    # then, apply that matrix to the fields

    # the atoms for which the fields should be used
    relevant_j = Map.relevant_j_arr

    E, G = AIM_MF.EG_rotation(E, G, rot_mat, relevant_j)

    # Finally, apply the map to the fields to calculate the frequency!
    omega = WS.AllMaps.Emap.SC.omega
    Pmap = WS.AllMaps.Emap.SC.Pmap
    Emap = WS.AllMaps.Emap.SC.Emap
    Gmap = WS.AllMaps.Emap.SC.Gmap

    freq = AIM_MF.apply_map(P, E, G, omega, Pmap, Emap, Gmap, relevant_j)

    return freq, rot_mat


def calc_dipole(P, E, G, AmGroup, rot_mat, FILES, RunPar, WS, Map):
    # CAUTION!!! PEG are still in the format they're left in by calc_freq!

    Am_C = WS.AllOscGroups[AmGroup, 6]
    Am_O = WS.AllOscGroups[AmGroup, 7]
    Am_N = WS.AllOscGroups[AmGroup, 9]

    COvec = AIM_MF.PBC_diff(WS.positions[Am_O, :], WS.positions[Am_C, :],
                            WS.halfbox, WS.boxdims)
    COvec /= AIM_MF.vec3_len(COvec)

    if RunPar.Dipole_choice == "Torii":
        CNvec = AIM_MF.PBC_diff(WS.positions[Am_N, :], WS.positions[Am_C, :],
                                WS.halfbox, WS.boxdims)
        CNvec /= AIM_MF.vec3_len(CNvec)

        ri = WS.positions[Am_C, :] + 0.665*COvec + 0.258*CNvec

        if RunPar.replicate_orig_AIM:
            magnitude = 2.73
        else:
            magnitude = 0.276

        mi = AIM_PF.Dipole_Torii(COvec, CNvec, magnitude)

    else:
        mi_loc = np.zeros((3))
        mi = np.zeros((3))

        Emap = WS.AllMaps.Dmap.SC
        for xyz in range(3):
            mi_loc[xyz] = AIM_MF.apply_map(
                P, E, G, Emap.omega[xyz], Emap.Pmap[xyz],
                Emap.Emap[xyz], Emap.Gmap[xyz],
                Emap.relevant_j_arr
            )

        mi = np.dot(mi_loc, rot_mat)

        ri = WS.positions[Am_C, :] + 0.868*COvec

    return mi, ri


def calc_raman(OscGroup, P, E, G, rot_mat, FILES, RunPar, WS, Map):
    """
    Calculates the Raman tensor of this oscillator.
    Raman tensor in form of a vector with 6 values (xx xy xz yy yz zz)
    """
    #get the basis from the rotation matrix
    COvec = rot_mat[0,:]
    CNvec = rot_mat[1,:]
    Zvec = rot_mat[2,:]

    theta = 34*np.pi/180

    RXvec = np.cos(theta)* COvec - np.sin(theta)* CNvec
    RYvec = np.sin(theta)* COvec + np.cos(theta)* CNvec

    Rvec = AIM_MF.tensorprod(RXvec)*20 + AIM_MF.tensorprod(RYvec)*4 + AIM_MF.tensorprod(Zvec)

    return Rvec


    [  References  ]

@article{TsuboiThomasJr.1997,
  title = {Raman Scattering Tensors in Biological Molecules and Their Assemblies},
  author = {Tsuboi, Masamichi and Thomas Jr., George J.},
  year = {1997},
  month = aug,
  journal = {Appl. Spectrosc. Rev.},
  volume = {32},
  number = {3},
  pages = {263--299},
  issn = {0570-4928, 1520-569X},
  doi = {10.1080/05704929708003316},
  url = {http://www.tandfonline.com/doi/abs/10.1080/05704929708003316},
  urldate = {2022-01-11},
  langid = {english},
  AIMnotes = {Raman}
}
